<?php

/**
 * @file
 * Bootstrap Paragraphs Callout module file.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_theme().
 */
// function bp_columns_theme($existing, $type, $theme, $path) {
//   return [
//     'paragraph__bp_columns' => [
//       'base hook' => 'paragraph',
//     ],
//   ];
// }

function bp_columns_theme($existing, $type, $theme, $path){
  $theme_templates  = [];
  $paragraph_types  = bp_columns_get_paragraph_types();

  // Register custom Paragraph bundle templates
  foreach ($paragraph_types as $paragraph_type){
    $theme_templates['paragraph__columns' . $paragraph_type] = [
      'base hook' => 'paragraph'
    ];
  }

  // Register custom Paragraph bundle template fallback
  $theme_templates['paragraph__columns'] = [
    'base hook' => 'paragraph'
  ];

  // Register custom Paragraph field
  $theme_templates['field__paragraph__bp_column_content'] = [
    'base hook' => 'field',
  ];

  return $theme_templates;
}

/**
 * Implements HOOK_theme_suggestions_HOOK_alter
 */
function bp_columns_theme_suggestions_field_alter(array &$suggestions, array $variables, $hook) {
  $field = $variables['element']['#field_name'];

  if( $field == 'field__paragraph__bp_column_content' ) {
    $suggestions[] = 'field__paragraph__bp_column_content';
  }
}

/**
 * Implements HOOK_theme_suggestions_HOOK_alter
 */
function bp_columns_theme_suggestions_paragraph_alter(&$suggestions, $variables){
  $entity              = $variables['elements']['#paragraph'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  $type                = $entity->getType();

  $suggestions[] = 'paragraph__bp_columns';
  $suggestions[] = 'paragraph__bp_columns__' . $type;
  $suggestions[] = 'paragraph__bp_columns__' . $type . '__' . $sanitized_view_mode;
}

/**
 * Implements hook_help().
 *
 * @inheritdoc
 */
function bp_columns_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.bp_columns':
      $text = file_get_contents(dirname(__FILE__) . "/README.md");
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.kan_field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% if is_scs_view | render %}
  {{ attach_library('kan_filtered_list/kan_teaser') }}
{% endif %}

{# Check for top padding remove #}
{% if content.kan_field_remove_top_padding[0]["#markup"] == 1 %}
  {% set remove_top_padding = 'remove-top-padding' %}
{% endif %}

{# Set the background color. #}
{% if content.kan_field_background_color | render %}
  {% set bg = 'filtered-list--bg-' ~ content.kan_field_background_color[0]["#markup"] %}
  {# Class for any background so we can add padding. #}
  {% set has_bg = 'has-bg' %}
{% endif %}

{{ attach_library('kan_filtered_list/kan_filtered_list') }}

{% set classes = [
  has_bg,
  remove_top_padding,
  bg | clean_class,
  'filtered-list',
] %}

{# Set the edge to edge class. #}
{% if content.kan_field_background_color | render %}
  <div class="filtered-list__full-width-bg">
{% endif %}

<div{{ attributes.addClass(classes) }}>

  {% if ( content.kan_field_overline | render) or ( content.kan_field_heading | render) %}
    <div class="filtered-list__header">
      {% if content.kan_field_overline | render %}
        <div class="filtered-list__overline">
          <p class="overline">{{ content.kan_field_overline | field_value }}</p>
        </div>
      {% endif %}

      {% if content.kan_field_heading | render %}
        <div class="filtered-list__title">
          <h2>{{ content.kan_field_heading | field_value }}</h2>
        </div>
      {% endif %}
    </div>
  {% endif %}

  <div class="filtered-list__view">
    {{ content.kan_field_views }}
  </div>
</div>

{% if content.kan_field_background_color | render %}
  </div>
{% endif %}